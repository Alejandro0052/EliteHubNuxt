// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name ""

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  firstName     String
  lastName      String
  avatar        String?
  password      String
  isAdmin       Boolean      @default(false)
  roleId        String?
  role          Role?        @relation(fields: [roleId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  informationId String?
  information   Information? @relation(fields: [informationId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  pqrs          PQRS[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  UserSport     UserSport[]
}

model Role {
  id          String           @id @default(cuid())
  name        String
  users       User[]
  permissions RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Permission {
  id        String           @id @default(cuid())
  name      String
  roles     RolePermission[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([roleId, permissionId])
}

model Information {
  id               String          @id @default(cuid())
  bio              String?
  phone            String?
  gender           String?
  birthDate        DateTime?
  profession       String?
  specialty        String?
  experience       String?
  commercialName   String?
  businessName     String?
  nit              String?
  website          String?
  maxBudget        Int?
  yearsInOperation Int?
  offices          String[]
  userTypeId       String?
  userType         UserType?       @relation(fields: [userTypeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  addresses        Address[]
  socialNetworks   SocialNetwork[]
  users            User[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model UserType {
  id          String        @id @default(cuid())
  type        String        @unique
  description String?
  information Information[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Address {
  id             String       @id @default(cuid())
  address        String
  cityId         String
  countryId      String
  neighborhoodId String
  reference      String?
  informationId  String?
  city           City         @relation(fields: [cityId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  country        Country      @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  information    Information? @relation(fields: [informationId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Country {
  id        String    @id @default(cuid())
  name      String    @unique
  cities    City[]
  addresses Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model City {
  id            String         @id @default(cuid())
  name          String
  countryId     String
  country       Country        @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  neighborhoods Neighborhood[]
  addresses     Address[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Neighborhood {
  id        String    @id @default(cuid())
  name      String
  cityId    String
  city      City      @relation(fields: [cityId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  addresses Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, cityId])
}

model SocialNetwork {
  id            String      @id @default(cuid())
  name          String
  url           String
  informationId String
  information   Information @relation(fields: [informationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model PQRS {
  id            String   @id @default(cuid())
  subject       String
  message       String
  evidenceImage String[]
  userId        String
  typeId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type          PQRSType @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PQRSType {
  id        String   @id @default(cuid())
  type      String   @unique
  pqrs      PQRS[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Level {
  PRINCIPIANTE
  INTERMEDIO
  AVANZADO
  EXPERTO
}

model Sport {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  userSports  UserSport[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model UserSport {
  id              String   @id @default(cuid())
  userId          String
  sportId         String
  experience      Int
  level           Level    @default(PRINCIPIANTE)
  weeklyFrequency Int
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sport           Sport    @relation(fields: [sportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, sportId])
}

model Content {
  id        String   @id @default(cuid())
  page      String   @unique
  title     String?
  subtitle  String?
  content   String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
